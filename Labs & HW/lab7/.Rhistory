})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions by Ethnicity App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Admissions by Ethnicity Data", width = 10,
plotOutput("plot", width = "800px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions by Ethnicity App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Admissions by Ethnicity Data", width = 10,
plotOutput("plot", width = "800px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(title = "Observations by Taxon in Homerange Data",
x = "Taxonomic Group",
fill= "Trophic Guild")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions by Ethnicity App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Admissions by Ethnicity Data", width = 10,
plotOutput("plot", width = "800px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"))
labs( y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions by Ethnicity App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Admissions by Ethnicity Data", width = 10,
plotOutput("plot", width = "800px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold")) +
labs( y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions by Ethnicity App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Admissions by Ethnicity Data", width = 10,
plotOutput("plot", width = "1000px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold")) +
labs( y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions by Ethnicity App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Admissions by Ethnicity Data", width = 10,
plotOutput("plot", width = "1000px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold")) +
labs( y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "800px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold")) +
labs( y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "800px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold")) +
labs( x = "Academic Year", y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "1000px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold")) +
labs( x = "Academic Year", y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "1200px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold")) +
labs( x = "Academic Year", y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 2,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "1500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold")) +
labs( x = "Academic Year", y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "1500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold")) +
labs( x = "Academic Year", y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "1500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold")) +
labs( x = "Academic Year", y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "1400px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold")) +
labs( x = "Academic Year", y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "1400px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold"),
legend.key.size = unit(3,"line")) +
labs( x = "Academic Year", y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "1400px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold"),
legend.key.size = unit(2,"line")) +
labs( x = "Academic Year", y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Enrollment by Year App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Enrollment by Year Data", width = 10,
plotOutput("plot", width = "1200px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold"),
legend.key.size = unit(2,"line")) +
labs( x = "Academic Year", y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot UC Admissions by Ethnicity App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("fill", "Select Fill", choices = c("Campus", "Academic_Yr", "Category"),
selected = "Campus"),
), # close the first box
box(title = "Plot of UC Admissions by Ethnicity Data", width = 10,
plotOutput("plot", width = "1000px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$fill)) +
geom_col(position = "dodge") +
theme(axis.text = element_text(size = 13),
axis.title = element_text(size = 15, face = "bold"),
legend.key.size = unit(2,"line")) +
labs( y = "Count")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
