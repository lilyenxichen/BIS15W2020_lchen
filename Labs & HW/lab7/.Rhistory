plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=3)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
#install.packages("shiny")
library(shiny)
library(tidyverse)
#runApp("plot_iris.R")
runApp("plot_iris.R")
runApp("plot_iris.R")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shiny")
library(shiny)
#install.packages("shiny")
library(shiny)
library(tidyverse)
runApp("plot_iris.R")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
runApp("plot_iris.R")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shiny")
library(shiny)
library(tidyverse)
runApp("plot_iris.R")
ui <- fluidPage()
server <- function(input, output, session) {}
shinyApp(ui, server)
names(iris)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length")
)
server <- function(input, output, session) {
reactive({input$x
input$y})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, color = "Species")) +
geom_point() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv", na = c("", "NA", "\\"))
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, color = "Species")) +
geom_point() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
View(homerange)
ui <- fluidPage(
selectInput("x", "Select fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, color = "locomotion")) +
geom_bar()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(iris, aes_string(x = "locomotion", fill = input$x)) +
geom_bar()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x)) +
geom_bar()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x)) +
geom_bar() +
position_dodge()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x)) +
geom_bar()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x)) +
geom_bar(position = "dodge")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Locomotion Type"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("locomotion", " Select Locomotion of Interest:",
choices=unique(homerange$locomotion)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("locomotionPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$locomotionPlot <- renderPlot({
homerange %>%
filter(locomotion == input$locomotion) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
View(ui)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
library("tidyverse")
library("shiny")
install.package("naniar")
library("tidyverse")
library("shiny")
install.packages("naniar")
library("naniar")
runApp('Homerange App.R')
library("tidyverse")
library("shiny")
#install.packages("naniar")
library("naniar")
install.packages("shinydashboard")
library("shinydashboard")
library("tidyverse")
library("shiny")
#install.packages("naniar")
library("naniar")
#install.packages("shinydashboard")
library("shinydashboard")
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("fontsize", "Select the Font Size", min = 10, max = 24, value = 18, step = 1),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point() + theme_light(base_size = input$fontsize)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) {
session$onSessionEnded(stopApp)}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) {
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <-
dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
View(gabon)
View(gabon)
ui <- dashboardPage(
dashboardHeader(title = "Plot Relative Abundance App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Relative Abundance Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", col = input(x))) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Relative Abundance App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Relative Abundance Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", col = input$x)) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Relative Abundance App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Relative Abundance Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
